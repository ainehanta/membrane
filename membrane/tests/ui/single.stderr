error: #[async_dart] expects a `namespace` attribute
 --> tests/ui/single.rs:3:1
  |
3 | #[async_dart]
  | ^^^^^^^^^^^^^
  |
  = note: this error originates in the attribute macro `async_dart` (in Nightly builds, run with -Z macro-backtrace for more info)

error: only `namespace=""`, `borrow="namespace::Type"`, `disable_logging=true`, `os_thread=true`, and `timeout=1000` are valid options
 --> tests/ui/single.rs:6:1
  |
6 | #[async_dart(namespace = "a", foo = true)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: this error originates in the attribute macro `async_dart` (in Nightly builds, run with -Z macro-backtrace for more info)

error: `os_thread=true` is not a valid option for `sync_dart`
 --> tests/ui/single.rs:9:1
  |
9 | #[sync_dart(namespace = "a", os_thread = true)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: this error originates in the attribute macro `sync_dart` (in Nightly builds, run with -Z macro-backtrace for more info)

error: expected enum `Result`
  --> tests/ui/single.rs:15:29
   |
15 | pub async fn no_result() -> i32 {}
   |                             ^^^

error: A tuple may not be returned from an `async_dart` function. If a tuple is needed return a struct containing the tuple.
  --> tests/ui/single.rs:18:37
   |
18 | pub async fn bare_tuple() -> Result<(i32, i32), String> {}
   |                                     ^^^^^^^^^^

error: expected enum `Result`
  --> tests/ui/single.rs:21:36
   |
21 | pub async fn top_level_option() -> Option<String> {}
   |                                    ^^^^^^

error: expected a struct, vec, or scalar type but found `dyn Fn()`
  --> tests/ui/single.rs:24:36
   |
24 | pub async fn return_fn() -> Result<dyn Fn(), String> {}
   |                                    ^^^

error: #[sync_dart] expected a return type of `Result<T, E>` found an emitter
  --> tests/ui/single.rs:32:8
   |
32 | pub fn emitter_in_sync_return() -> impl membrane::emitter::Emitter<Result<String, String>> {
   |        ^^^^^^^^^^^^^^^^^^^^^^

error: not a supported argument type for Dart interop
  --> tests/ui/single.rs:39:26
   |
39 | pub async fn failing_arg(self) -> Result<(), String> {
   |                          ^^^^

error: not a supported argument type for Dart interop, please use i64 instead.
  --> tests/ui/single.rs:44:32
   |
44 | pub async fn bad_arg_type(one: i32) -> Result<i32, String> {}
   |                                ^^^

error: not a supported argument type for Dart interop, please use i64 instead.
  --> tests/ui/single.rs:47:39
   |
47 | pub async fn bad_nested_arg_type(one: Vec<i32>) -> Result<i32, String> {}
   |                                       ^^^^^^^^

error: not a supported argument type for Dart interop
  --> tests/ui/single.rs:50:35
   |
50 | pub async fn failing_arg_two(foo: &[i8]) -> Result<(), String> {
   |                                   ^^^^^
